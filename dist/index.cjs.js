
  /**
   * @license
   * author: Ryan Feigenbaum
   * footnoter.js v1.0.0
   * Released under the MIT license.
   */

'use strict';

const styles = `.footnote {position:relative} a.footnote:hover {opacity: 1} .footnote:hover::after {width:200px;
	content: attr(data-reference); position:absolute; top: -1rem; right: 25px; box-shadow: 2px 2px 20px rgb(0 0 0 / .25); padding: 5px 15px; background: white; border-radius; 5px; transform: translateY(-50%); 
}`;

function init() {
    const article = document.querySelector('article');
    if (!article)
        throw Error('Content container not found');
    const ni = document.createNodeIterator(article, NodeFilter.SHOW_TEXT);
    if (!ni.referenceNode)
        return;
    let current = ni.nextNode();
    let nodes = [];
    while (current) {
        const str = ni.referenceNode.textContent;
        if (typeof str !== "string" || !str)
            throw Error('Nothing to match');
        if (/>>/.test(str)) {
            const matchResults = str.match(/>>(\d)/);
            if (matchResults) {
                const [whole, group] = matchResults;
                const extract = str.replace(/>>\d/, "");
                const fn = document.createElement('a');
                const sup = document.createElement('sup');
                fn.setAttribute('href', `#${group}`);
                sup.textContent = group;
                fn.setAttribute('style', 'padding: 5px');
                fn.classList.add('footnote');
                fn.id = `ref-${group}`;
                fn.append(sup);
                ni.referenceNode.parentElement && ni.referenceNode.parentElement.append(fn);
                ni.referenceNode.textContent = extract;
                nodes.push(ni.referenceNode);
            }
        }
        if (/<</.test(ni.referenceNode.textContent)) {
            const t = ni.referenceNode.textContent.match(/<<(\d)/, "FOOTNOTE $1")[1];
            const extract = ni.referenceNode.textContent.replace(/<<\d/, "");
            const reference = ni.referenceNode.parentElement.textContent.replace(/<<\d/, "");
            document.getElementById(`ref-${t}`).setAttribute('data-reference', reference);
            const fn = document.createElement('a');
            const sup = document.createElement('sup');
            fn.setAttribute('href', `#ref-${t}`);
            sup.textContent = t;
            fn.setAttribute('style', 'padding: 5px');
            fn.id = t;
            fn.append(sup);
            ni.referenceNode.parentElement.prepend(fn);
            ni.referenceNode.textContent = extract;
        }
        current = ni.nextNode();
    }
    const style = document.createElement('style');
    style.textContent = styles;
    document.head.append(style);
    console.log(nodes);
}

module.exports = init;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguY2pzLmpzIiwic291cmNlcyI6WyIuLi9zcmMvc3R5bGVzLnRzIiwiLi4vc3JjL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHN0eWxlczogc3RyaW5nID0gYC5mb290bm90ZSB7cG9zaXRpb246cmVsYXRpdmV9IGEuZm9vdG5vdGU6aG92ZXIge29wYWNpdHk6IDF9IC5mb290bm90ZTpob3Zlcjo6YWZ0ZXIge3dpZHRoOjIwMHB4O1xuXHRjb250ZW50OiBhdHRyKGRhdGEtcmVmZXJlbmNlKTsgcG9zaXRpb246YWJzb2x1dGU7IHRvcDogLTFyZW07IHJpZ2h0OiAyNXB4OyBib3gtc2hhZG93OiAycHggMnB4IDIwcHggcmdiKDAgMCAwIC8gLjI1KTsgcGFkZGluZzogNXB4IDE1cHg7IGJhY2tncm91bmQ6IHdoaXRlOyBib3JkZXItcmFkaXVzOyA1cHg7IHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTsgXG59YFxuXG5leHBvcnQgZGVmYXVsdCBzdHlsZXM7IiwiaW1wb3J0IG9wdGlvbnMgZnJvbSBcIi4vb3B0aW9uc1wiO1xuaW1wb3J0IHN0eWxlcyBmcm9tIFwiLi9zdHlsZXNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICBjb25zdCBhcnRpY2xlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYXJ0aWNsZScpXG5cbiAgICBpZiAoIWFydGljbGUpIHRocm93IEVycm9yKCdDb250ZW50IGNvbnRhaW5lciBub3QgZm91bmQnKTtcblxuICAgIGNvbnN0IG5pID0gZG9jdW1lbnQuY3JlYXRlTm9kZUl0ZXJhdG9yKGFydGljbGUsIE5vZGVGaWx0ZXIuU0hPV19URVhUKVxuXG4gICAgaWYgKCFuaS5yZWZlcmVuY2VOb2RlKSByZXR1cm47XG5cbiAgICBsZXQgY3VycmVudCA9IG5pLm5leHROb2RlKClcblxuICAgIGxldCBub2RlcyA9IFtdXG5cbiAgICB3aGlsZSAoY3VycmVudCkge1xuICAgICAgICBjb25zdCBzdHIgPSBuaS5yZWZlcmVuY2VOb2RlLnRleHRDb250ZW50O1xuXG4gICAgICAgIGlmICh0eXBlb2Ygc3RyICE9PSBcInN0cmluZ1wiIHx8ICFzdHIpIHRocm93IEVycm9yKCdOb3RoaW5nIHRvIG1hdGNoJyk7XG5cbiAgICAgICAgaWYgKC8+Pi8udGVzdChzdHIpKSB7XG5cbiAgICAgICAgICAgIGNvbnN0IG1hdGNoUmVzdWx0cyA9IHN0ci5tYXRjaCgvPj4oXFxkKS8pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAobWF0Y2hSZXN1bHRzKSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgY29uc3QgW3dob2xlLCBncm91cF0gPSBtYXRjaFJlc3VsdHM7XG4gICAgICAgICAgICAgICAgY29uc3QgZXh0cmFjdCA9IHN0ci5yZXBsYWNlKC8+PlxcZC8sIFwiXCIpXG4gICAgICAgICAgICAgICAgY29uc3QgZm4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJylcbiAgICAgICAgICAgICAgICBjb25zdCBzdXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdXAnKVxuICAgICAgICAgICAgICAgIGZuLnNldEF0dHJpYnV0ZSgnaHJlZicsIGAjJHtncm91cH1gKVxuICAgICAgICAgICAgICAgIHN1cC50ZXh0Q29udGVudCA9IGdyb3VwO1xuICAgICAgICAgICAgICAgIGZuLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCAncGFkZGluZzogNXB4JylcbiAgICAgICAgICAgICAgICBmbi5jbGFzc0xpc3QuYWRkKCdmb290bm90ZScpXG4gICAgICAgICAgICAgICAgZm4uaWQgPSBgcmVmLSR7Z3JvdXB9YDtcbiAgICAgICAgICAgICAgICBmbi5hcHBlbmQoc3VwKVxuICAgICAgICAgICAgICAgIG5pLnJlZmVyZW5jZU5vZGUucGFyZW50RWxlbWVudCAmJiBuaS5yZWZlcmVuY2VOb2RlLnBhcmVudEVsZW1lbnQuYXBwZW5kKGZuKVxuXG4gICAgICAgICAgICAgICAgbmkucmVmZXJlbmNlTm9kZS50ZXh0Q29udGVudCA9IGV4dHJhY3Q7XG5cblxuICAgICAgICAgICAgICAgIG5vZGVzLnB1c2gobmkucmVmZXJlbmNlTm9kZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgvPDwvLnRlc3QobmkucmVmZXJlbmNlTm9kZS50ZXh0Q29udGVudCkpIHtcblxuICAgICAgICAgICAgY29uc3QgdCA9IG5pLnJlZmVyZW5jZU5vZGUudGV4dENvbnRlbnQubWF0Y2goLzw8KFxcZCkvLCBcIkZPT1ROT1RFICQxXCIpWzFdXG4gICAgICAgICAgICBjb25zdCBleHRyYWN0ID0gbmkucmVmZXJlbmNlTm9kZS50ZXh0Q29udGVudC5yZXBsYWNlKC88PFxcZC8sIFwiXCIpXG5cblxuICAgICAgICAgICAgY29uc3QgcmVmZXJlbmNlID0gbmkucmVmZXJlbmNlTm9kZS5wYXJlbnRFbGVtZW50LnRleHRDb250ZW50LnJlcGxhY2UoLzw8XFxkLywgXCJcIik7XG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChgcmVmLSR7dH1gKS5zZXRBdHRyaWJ1dGUoJ2RhdGEtcmVmZXJlbmNlJywgcmVmZXJlbmNlKVxuICAgICAgICAgICAgY29uc3QgZm4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJylcbiAgICAgICAgICAgIGNvbnN0IHN1cCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N1cCcpXG4gICAgICAgICAgICBmbi5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBgI3JlZi0ke3R9YClcbiAgICAgICAgICAgIHN1cC50ZXh0Q29udGVudCA9IHQ7XG4gICAgICAgICAgICBmbi5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgJ3BhZGRpbmc6IDVweCcpXG4gICAgICAgICAgICBmbi5pZCA9IHQ7XG4gICAgICAgICAgICBmbi5hcHBlbmQoc3VwKVxuICAgICAgICAgICAgbmkucmVmZXJlbmNlTm9kZS5wYXJlbnRFbGVtZW50LnByZXBlbmQoZm4pXG5cbiAgICAgICAgICAgIG5pLnJlZmVyZW5jZU5vZGUudGV4dENvbnRlbnQgPSBleHRyYWN0O1xuXG5cbiAgICAgICAgfVxuXG4gICAgICAgIGN1cnJlbnQgPSBuaS5uZXh0Tm9kZSgpXG4gICAgfVxuXG5cbiAgICBjb25zdCBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJylcbiAgICBzdHlsZS50ZXh0Q29udGVudCA9IHN0eWxlcztcbiAgICBkb2N1bWVudC5oZWFkLmFwcGVuZChzdHlsZSlcbiAgICBjb25zb2xlLmxvZyhub2Rlcylcbn0iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLE1BQU0sTUFBTSxHQUFXLENBQUE7O0VBRXJCOztBQ0NZLFNBQVUsSUFBSSxHQUFBO0lBQ3hCLE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLENBQUE7QUFFakQsSUFBQSxJQUFJLENBQUMsT0FBTztBQUFFLFFBQUEsTUFBTSxLQUFLLENBQUMsNkJBQTZCLENBQUMsQ0FBQztBQUV6RCxJQUFBLE1BQU0sRUFBRSxHQUFHLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLEVBQUUsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFBO0lBRXJFLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYTtRQUFFLE9BQU87QUFFOUIsSUFBQSxJQUFJLE9BQU8sR0FBRyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUE7SUFFM0IsSUFBSSxLQUFLLEdBQUcsRUFBRSxDQUFBO0FBRWQsSUFBQSxPQUFPLE9BQU8sRUFBRTtBQUNaLFFBQUEsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUM7QUFFekMsUUFBQSxJQUFJLE9BQU8sR0FBRyxLQUFLLFFBQVEsSUFBSSxDQUFDLEdBQUc7QUFBRSxZQUFBLE1BQU0sS0FBSyxDQUFDLGtCQUFrQixDQUFDLENBQUM7QUFFckUsUUFBQSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFFaEIsTUFBTSxZQUFZ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
