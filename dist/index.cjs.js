
  /**
   * @license
   * author: Ryan Feigenbaum
   * footnoter.js v1.0.0
   * Released under the MIT license.
   */

'use strict';

const options = {
    container: "article",
    fnAnchor: ">>",
    refAnchor: "<<",
    background: "#fff",
    text: "#000",
};

const styles = (text, background) => {
    const styles = `.footnote {position:relative} 
 .reference-preview {
	position: absolute;
	opacity: 0;
	bottom: -2em;
	left: 0;
	transform: translateY(100%);
	pointer-events: none;
	background-color: ${background};
	color: ${text};
	padding: 1em;
	border-radius: 9px;
	box-shadow: 2px 2px 5px 10px rgb(0 0 0 / .75), 5px 5px 2rem 15px rgb(0 0 0 / .35);
	width: 50vw;
	font-size: 15px;
	transition: .4s;

 }
   
 .footnote:hover .reference-preview {
	opacity: 1;
 }
 
   `;
    const style = document.createElement("style");
    style.textContent = styles;
    document.head.append(style);
};

function init(userOptions) {
    const config = { ...options, ...userOptions };
    const { container, fnAnchor, refAnchor, text, background } = config;
    styles(text, background);
    const fnRE = new RegExp(`${fnAnchor}(\\d)`, "g");
    const refRE = new RegExp(`${refAnchor}(\\d)`, "g");
    console.log(fnRE);
    const article = document.querySelector(container);
    if (!article)
        throw Error("Content container not found");
    const ni = document.createNodeIterator(article, NodeFilter.SHOW_TEXT);
    if (!ni.referenceNode)
        throw Error("Reference node not found");
    let current;
    let nodes = [];
    while ((current = ni.nextNode())) {
        const parentEl = ni.referenceNode.parentElement;
        const str = ni.referenceNode.textContent;
        if (!parentEl)
            return;
        // console.log(str, current);
        if (typeof str !== "string" || !str)
            throw Error("Nothing to match");
        if (fnRE.test(str)) {
            const transformedText = parentEl?.innerText.replace(fnRE, "<a class='footnote' id='$1' href='#ref-$1'><sup>$1</sup></a>");
            parentEl.innerHTML = transformedText;
        }
        if (refRE.test(str)) {
            // Need to encode/decode html entities in config
            const transformedText = parentEl.innerHTML.replaceAll(/&lt;&lt;(\d)/g, '<a href="#$1" id="ref-$1">$1</a>');
            console.log(transformedText);
            parentEl.innerHTML = transformedText;
            const matches = str.match(refRE);
            matches.forEach((match) => {
                const [num] = /\d/.exec(match);
                const span = document.createElement("span");
                span.setAttribute("class", "reference-preview");
                span.innerHTML = parentEl.innerHTML.replace(num + " ", "");
                document.getElementById(num)?.append(span);
            });
        }
        nodes.push(current);
    }
    console.log(nodes);
}

module.exports = init;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguY2pzLmpzIiwic291cmNlcyI6WyIuLi9zcmMvb3B0aW9ucy50cyIsIi4uL3NyYy9zdHlsZXMudHMiLCIuLi9zcmMvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW50ZXJmYWNlIE9wdGlvbnMge1xuICBjb250YWluZXI6IHN0cmluZztcbiAgZm5BbmNob3I6IHN0cmluZztcbiAgcmVmQW5jaG9yOiBzdHJpbmc7XG4gIGJhY2tncm91bmQ6IHN0cmluZztcbiAgdGV4dDogc3RyaW5nO1xufVxuXG5jb25zdCBvcHRpb25zOiBPcHRpb25zID0ge1xuICBjb250YWluZXI6IFwiYXJ0aWNsZVwiLFxuICBmbkFuY2hvcjogXCI+PlwiLFxuICByZWZBbmNob3I6IFwiPDxcIixcbiAgYmFja2dyb3VuZDogXCIjZmZmXCIsXG4gIHRleHQ6IFwiIzAwMFwiLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgb3B0aW9ucztcbiIsImNvbnN0IHN0eWxlcyA9ICh0ZXh0OiBzdHJpbmcsIGJhY2tncm91bmQ6IHN0cmluZyk6IHZvaWQgPT4ge1xuICBjb25zdCBzdHlsZXMgPSBgLmZvb3Rub3RlIHtwb3NpdGlvbjpyZWxhdGl2ZX0gXG4gLnJlZmVyZW5jZS1wcmV2aWV3IHtcblx0cG9zaXRpb246IGFic29sdXRlO1xuXHRvcGFjaXR5OiAwO1xuXHRib3R0b206IC0yZW07XG5cdGxlZnQ6IDA7XG5cdHRyYW5zZm9ybTogdHJhbnNsYXRlWSgxMDAlKTtcblx0cG9pbnRlci1ldmVudHM6IG5vbmU7XG5cdGJhY2tncm91bmQtY29sb3I6ICR7YmFja2dyb3VuZH07XG5cdGNvbG9yOiAke3RleHR9O1xuXHRwYWRkaW5nOiAxZW07XG5cdGJvcmRlci1yYWRpdXM6IDlweDtcblx0Ym94LXNoYWRvdzogMnB4IDJweCA1cHggMTBweCByZ2IoMCAwIDAgLyAuNzUpLCA1cHggNXB4IDJyZW0gMTVweCByZ2IoMCAwIDAgLyAuMzUpO1xuXHR3aWR0aDogNTB2dztcblx0Zm9udC1zaXplOiAxNXB4O1xuXHR0cmFuc2l0aW9uOiAuNHM7XG5cbiB9XG4gICBcbiAuZm9vdG5vdGU6aG92ZXIgLnJlZmVyZW5jZS1wcmV2aWV3IHtcblx0b3BhY2l0eTogMTtcbiB9XG4gXG4gICBgO1xuICBjb25zdCBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgc3R5bGUudGV4dENvbnRlbnQgPSBzdHlsZXM7XG4gIGRvY3VtZW50LmhlYWQuYXBwZW5kKHN0eWxlKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHN0eWxlcztcbiIsImltcG9ydCBvcHRpb25zIGZyb20gXCIuL29wdGlvbnNcIjtcbmltcG9ydCBzdHlsZXMgZnJvbSBcIi4vc3R5bGVzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGluaXQodXNlck9wdGlvbnM6IHtcbiAgY29udGFpbmVyPzogc3RyaW5nO1xuICBmbkFuY2hvcj86IHN0cmluZztcbiAgcmVmQW5jaG9yPzogc3RyaW5nO1xuICB0ZXh0Pzogc3RyaW5nO1xuICBiYWNrZ3JvdW5kPzogc3RyaW5nO1xufSk6IHZvaWQge1xuICBjb25zdCBjb25maWcgPSB7IC4uLm9wdGlvbnMsIC4uLnVzZXJPcHRpb25zIH07XG5cbiAgY29uc3QgeyBjb250YWluZXIsIGZuQW5jaG9yLCByZWZBbmNob3IsIHRleHQsIGJhY2tncm91bmQgfSA9IGNvbmZpZztcbiAgc3R5bGVzKHRleHQsIGJhY2tncm91bmQpO1xuXG4gIGNvbnN0IGZuUkUgPSBuZXcgUmVnRXhwKGAke2ZuQW5jaG9yfShcXFxcZClgLCBcImdcIik7XG4gIGNvbnN0IHJlZlJFID0gbmV3IFJlZ0V4cChgJHtyZWZBbmNob3J9KFxcXFxkKWAsIFwiZ1wiKTtcbiAgY29uc29sZS5sb2coZm5SRSk7XG4gIGNvbnN0IGFydGljbGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNvbnRhaW5lcik7XG5cbiAgaWYgKCFhcnRpY2xlKSB0aHJvdyBFcnJvcihcIkNvbnRlbnQgY29udGFpbmVyIG5vdCBmb3VuZFwiKTtcblxuICBjb25zdCBuaSA9IGRvY3VtZW50LmNyZWF0ZU5vZGVJdGVyYXRvcihhcnRpY2xlLCBOb2RlRmlsdGVyLlNIT1dfVEVYVCk7XG5cbiAgaWYgKCFuaS5yZWZlcmVuY2VOb2RlKSB0aHJvdyBFcnJvcihcIlJlZmVyZW5jZSBub2RlIG5vdCBmb3VuZFwiKTtcblxuICBsZXQgY3VycmVudDtcblxuICBsZXQgbm9kZXMgPSBbXTtcblxuICB3aGlsZSAoKGN1cnJlbnQgPSBuaS5uZXh0Tm9kZSgpKSkge1xuICAgIGNvbnN0IHBhcmVudEVsID0gbmkucmVmZXJlbmNlTm9kZS5wYXJlbnRFbGVtZW50O1xuXG4gICAgY29uc3Qgc3RyID0gbmkucmVmZXJlbmNlTm9kZS50ZXh0Q29udGVudDtcbiAgICBpZiAoIXBhcmVudEVsKSByZXR1cm47XG5cbiAgICAvLyBjb25zb2xlLmxvZyhzdHIsIGN1cnJlbnQpO1xuXG4gICAgaWYgKHR5cGVvZiBzdHIgIT09IFwic3RyaW5nXCIgfHwgIXN0cikgdGhyb3cgRXJyb3IoXCJOb3RoaW5nIHRvIG1hdGNoXCIpO1xuXG4gICAgaWYgKGZuUkUudGVzdChzdHIpKSB7XG4gICAgICBjb25zdCB0cmFuc2Zvcm1lZFRleHQgPSBwYXJlbnRFbD8uaW5uZXJUZXh0LnJlcGxhY2UoXG4gICAgICAgIGZuUkUsXG4gICAgICAgIFwiPGEgY2xhc3M9J2Zvb3Rub3RlJyBpZD0nJDEnIGhyZWY9JyNyZWYtJDEnPjxzdXA+JDE8L3N1cD48L2E+XCJcbiAgICAgICk7XG4gICAgICBwYXJlbnRFbC5pbm5lckhUTUwgPSB0cmFuc2Zvcm1lZFRleHQ7XG4gICAgfVxuXG4gICAgaWYgKHJlZlJFLnRlc3Qoc3RyKSkge1xuICAgICAgLy8gTmVlZCB0byBlbmNvZGUvZGVjb2RlIGh0bWwgZW50aXRpZXMgaW4gY29uZmlnXG4gICAgICBjb25zdCB0cmFuc2Zvcm1lZFRleHQgPSBwYXJlbnRFbC5pbm5lckhUTUwucmVwbGFjZUFsbChcbiAgICAgICAgLyZsdDsmbHQ7KFxcZCkvZyxcbiAgICAgICAgJzxhIGhyZWY9XCIjJDFcIiBpZD1cInJlZi0kMVwiPiQxPC9hPidcbiAgICAgICk7XG4gICAgICBjb25zb2xlLmxvZyh0cmFuc2Zvcm1lZFRleHQpO1xuICAgICAgcGFyZW50RWwuaW5uZXJIVE1MID0gdHJhbnNmb3JtZWRUZXh0O1xuICAgICAgY29uc3QgbWF0Y2hlcyA9IHN0ci5tYXRjaChyZWZSRSk7XG5cbiAgICAgIG1hdGNoZXMuZm9yRWFjaCgobWF0Y2gpID0+IHtcbiAgICAgICAgY29uc3QgW251bV0gPSAvXFxkLy5leGVjKG1hdGNoKTtcblxuICAgICAgICBjb25zdCBzcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJyZWZlcmVuY2UtcHJldmlld1wiKTtcbiAgICAgICAgc3Bhbi5pbm5lckhUTUwgPSBwYXJlbnRFbC5pbm5lckhUTUwucmVwbGFjZShudW0gKyBcIiBcIiwgXCJcIik7XG5cbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobnVtKT8uYXBwZW5kKHNwYW4pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIG5vZGVzLnB1c2goY3VycmVudCk7XG4gIH1cbiAgY29uc29sZS5sb2cobm9kZXMpO1xufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFRQSxNQUFNLE9BQU8sR0FBWTtBQUN2QixJQUFBLFNBQVMsRUFBRSxTQUFTO0FBQ3BCLElBQUEsUUFBUSxFQUFFLElBQUk7QUFDZCxJQUFBLFNBQVMsRUFBRSxJQUFJO0FBQ2YsSUFBQSxVQUFVLEVBQUUsTUFBTTtBQUNsQixJQUFBLElBQUksRUFBRSxNQUFNO0NBQ2I7O0FDZEQsTUFBTSxNQUFNLEdBQUcsQ0FBQyxJQUFZLEVBQUUsVUFBa0IsS0FBVTtBQUN4RCxJQUFBLE1BQU0sTUFBTSxHQUFHLENBQUE7Ozs7Ozs7O3FCQVFJLFVBQVUsQ0FBQTtVQUNyQixJQUFJLENBQUE7Ozs7Ozs7Ozs7Ozs7O0lB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
