/**
   * @license
   * author: Ryan Feigenbaum
   * footnoter.js v1.0.0
   * Released under the MIT license.
   */
var footnoter=function(){"use strict";const e={container:"article",fnAnchor:">>",refAnchor:"<<",background:"#fff",text:"#000"};return function(n){const t={...e,...n},{container:o,fnAnchor:r,refAnchor:c,text:i,background:a}=t;((e,n)=>{const t=`.footnote {position:relative} \n .reference-preview {\n\tposition: absolute;\n\topacity: 0;\n\tbottom: -2em;\n\tleft: 0;\n\ttransform: translateY(100%);\n\tpointer-events: none;\n\tbackground-color: ${n};\n\tcolor: ${e};\n\tpadding: 1em;\n\tborder-radius: 9px;\n\tbox-shadow: 2px 2px 5px 10px rgb(0 0 0 / .75), 5px 5px 2rem 15px rgb(0 0 0 / .35);\n\twidth: 50vw;\n\tfont-size: 15px;\n\ttransition: .4s;\n\n }\n   \n .footnote:hover .reference-preview {\n\topacity: 1;\n }\n \n   `,o=document.createElement("style");o.textContent=t,document.head.append(o)})(i,a);const s=new RegExp(`${r}(\\d)`,"g"),f=new RegExp(`${c}(\\d)`,"g");console.log(s);const d=document.querySelector(o);if(!d)throw Error("Content container not found");const p=document.createNodeIterator(d,NodeFilter.SHOW_TEXT);if(!p.referenceNode)throw Error("Reference node not found");let l,u=[];for(;l=p.nextNode();){const e=p.referenceNode.parentElement,n=p.referenceNode.textContent;if(!e)return;if("string"!=typeof n||!n)throw Error("Nothing to match");if(s.test(n)){const n=e?.innerText.replace(s,"<a class='footnote' id='$1' href='#ref-$1'><sup>$1</sup></a>");e.innerHTML=n}if(f.test(n)){const t=e.innerHTML.replaceAll(/&lt;&lt;(\d)/g,'<a href="#$1" id="ref-$1">$1</a>');console.log(t),e.innerHTML=t;n.match(f).forEach((n=>{const[t]=/\d/.exec(n),o=document.createElement("span");o.setAttribute("class","reference-preview"),o.innerHTML=e.innerHTML.replace(t+" ",""),document.getElementById(t)?.append(o)}))}u.push(l)}console.log(u)}}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXgubWluLmpzIiwic291cmNlcyI6WyIuLi9zcmMvb3B0aW9ucy50cyIsIi4uL3NyYy9pbmRleC50cyIsIi4uL3NyYy9zdHlsZXMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW50ZXJmYWNlIE9wdGlvbnMge1xuICBjb250YWluZXI6IHN0cmluZztcbiAgZm5BbmNob3I6IHN0cmluZztcbiAgcmVmQW5jaG9yOiBzdHJpbmc7XG4gIGJhY2tncm91bmQ6IHN0cmluZztcbiAgdGV4dDogc3RyaW5nO1xufVxuXG5jb25zdCBvcHRpb25zOiBPcHRpb25zID0ge1xuICBjb250YWluZXI6IFwiYXJ0aWNsZVwiLFxuICBmbkFuY2hvcjogXCI+PlwiLFxuICByZWZBbmNob3I6IFwiPDxcIixcbiAgYmFja2dyb3VuZDogXCIjZmZmXCIsXG4gIHRleHQ6IFwiIzAwMFwiLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgb3B0aW9ucztcbiIsImltcG9ydCBvcHRpb25zIGZyb20gXCIuL29wdGlvbnNcIjtcbmltcG9ydCBzdHlsZXMgZnJvbSBcIi4vc3R5bGVzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGluaXQodXNlck9wdGlvbnM6IHtcbiAgY29udGFpbmVyPzogc3RyaW5nO1xuICBmbkFuY2hvcj86IHN0cmluZztcbiAgcmVmQW5jaG9yPzogc3RyaW5nO1xuICB0ZXh0Pzogc3RyaW5nO1xuICBiYWNrZ3JvdW5kPzogc3RyaW5nO1xufSk6IHZvaWQge1xuICBjb25zdCBjb25maWcgPSB7IC4uLm9wdGlvbnMsIC4uLnVzZXJPcHRpb25zIH07XG5cbiAgY29uc3QgeyBjb250YWluZXIsIGZuQW5jaG9yLCByZWZBbmNob3IsIHRleHQsIGJhY2tncm91bmQgfSA9IGNvbmZpZztcbiAgc3R5bGVzKHRleHQsIGJhY2tncm91bmQpO1xuXG4gIGNvbnN0IGZuUkUgPSBuZXcgUmVnRXhwKGAke2ZuQW5jaG9yfShcXFxcZClgLCBcImdcIik7XG4gIGNvbnN0IHJlZlJFID0gbmV3IFJlZ0V4cChgJHtyZWZBbmNob3J9KFxcXFxkKWAsIFwiZ1wiKTtcbiAgY29uc29sZS5sb2coZm5SRSk7XG4gIGNvbnN0IGFydGljbGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNvbnRhaW5lcik7XG5cbiAgaWYgKCFhcnRpY2xlKSB0aHJvdyBFcnJvcihcIkNvbnRlbnQgY29udGFpbmVyIG5vdCBmb3VuZFwiKTtcblxuICBjb25zdCBuaSA9IGRvY3VtZW50LmNyZWF0ZU5vZGVJdGVyYXRvcihhcnRpY2xlLCBOb2RlRmlsdGVyLlNIT1dfVEVYVCk7XG5cbiAgaWYgKCFuaS5yZWZlcmVuY2VOb2RlKSB0aHJvdyBFcnJvcihcIlJlZmVyZW5jZSBub2RlIG5vdCBmb3VuZFwiKTtcblxuICBsZXQgY3VycmVudDtcblxuICBsZXQgbm9kZXMgPSBbXTtcblxuICB3aGlsZSAoKGN1cnJlbnQgPSBuaS5uZXh0Tm9kZSgpKSkge1xuICAgIGNvbnN0IHBhcmVudEVsID0gbmkucmVmZXJlbmNlTm9kZS5wYXJlbnRFbGVtZW50O1xuXG4gICAgY29uc3Qgc3RyID0gbmkucmVmZXJlbmNlTm9kZS50ZXh0Q29udGVudDtcbiAgICBpZiAoIXBhcmVudEVsKSByZXR1cm47XG5cbiAgICAvLyBjb25zb2xlLmxvZyhzdHIsIGN1cnJlbnQpO1xuXG4gICAgaWYgKHR5cGVvZiBzdHIgIT09IFwic3RyaW5nXCIgfHwgIXN0cikgdGhyb3cgRXJyb3IoXCJOb3RoaW5nIHRvIG1hdGNoXCIpO1xuXG4gICAgaWYgKGZuUkUudGVzdChzdHIpKSB7XG4gICAgICBjb25zdCB0cmFuc2Zvcm1lZFRleHQgPSBwYXJlbnRFbD8uaW5uZXJUZXh0LnJlcGxhY2UoXG4gICAgICAgIGZuUkUsXG4gICAgICAgIFwiPGEgY2xhc3M9J2Zvb3Rub3RlJyBpZD0nJDEnIGhyZWY9JyNyZWYtJDEnPjxzdXA+JDE8L3N1cD48L2E+XCJcbiAgICAgICk7XG4gICAgICBwYXJlbnRFbC5pbm5lckhUTUwgPSB0cmFuc2Zvcm1lZFRleHQ7XG4gICAgfVxuXG4gICAgaWYgKHJlZlJFLnRlc3Qoc3RyKSkge1xuICAgICAgLy8gTmVlZCB0byBlbmNvZGUvZGVjb2RlIGh0bWwgZW50aXRpZXMgaW4gY29uZmlnXG4gICAgICBjb25zdCB0cmFuc2Zvcm1lZFRleHQgPSBwYXJlbnRFbC5pbm5lckhUTUwucmVwbGFjZUFsbChcbiAgICAgICAgLyZsdDsmbHQ7KFxcZCkvZyxcbiAgICAgICAgJzxhIGhyZWY9XCIjJDFcIiBpZD1cInJlZi0kMVwiPiQxPC9hPidcbiAgICAgICk7XG4gICAgICBjb25zb2xlLmxvZyh0cmFuc2Zvcm1lZFRleHQpO1xuICAgICAgcGFyZW50RWwuaW5uZXJIVE1MID0gdHJhbnNmb3JtZWRUZXh0O1xuICAgICAgY29uc3QgbWF0Y2hlcyA9IHN0ci5tYXRjaChyZWZSRSk7XG5cbiAgICAgIG1hdGNoZXMuZm9yRWFjaCgobWF0Y2gpID0+IHtcbiAgICAgICAgY29uc3QgW251bV0gPSAvXFxkLy5leGVjKG1hdGNoKTtcblxuICAgICAgICBjb25zdCBzcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJyZWZlcmVuY2UtcHJldmlld1wiKTtcbiAgICAgICAgc3Bhbi5pbm5lckhUTUwgPSBwYXJlbnRFbC5pbm5lckhUTUwucmVwbGFjZShudW0gKyBcIiBcIiwgXCJcIik7XG5cbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobnVtKT8uYXBwZW5kKHNwYW4pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIG5vZGVzLnB1c2goY3VycmVudCk7XG4gIH1cbiAgY29uc29sZS5sb2cobm9kZXMpO1xufVxuIiwiY29uc3Qgc3R5bGVzID0gKHRleHQ6IHN0cmluZywgYmFja2dyb3VuZDogc3RyaW5nKTogdm9pZCA9PiB7XG4gIGNvbnN0IHN0eWxlcyA9IGAuZm9vdG5vdGUge3Bvc2l0aW9uOnJlbGF0aXZlfSBcbiAucmVmZXJlbmNlLXByZXZpZXcge1xuXHRwb3NpdGlvbjogYWJzb2x1dGU7XG5cdG9wYWNpdHk6IDA7XG5cdGJvdHRvbTogLTJlbTtcblx0bGVmdDogMDtcblx0dHJhbnNmb3JtOiB0cmFuc2xhdGVZKDEwMCUpO1xuXHRwb2ludGVyLWV2ZW50czogbm9uZTtcblx0YmFja2dyb3VuZC1jb2xvcjogJHtiYWNrZ3JvdW5kfTtcblx0Y29sb3I6ICR7dGV4dH07XG5cdHBhZGRpbmc6IDFlbTtcblx0Ym9yZGVyLXJhZGl1czogOXB4O1xuXHRib3gtc2hhZG93OiAycHggMnB4IDVweCAxMHB4IHJnYigwIDAgMCAvIC43NSksIDVweCA1cHggMnJlbSAxNXB4IHJnYigwIDAgMCAvIC4zNSk7XG5cdHdpZHRoOiA1MHZ3O1xuXHRmb250LXNpemU6IDE1cHg7XG5cdHRyYW5zaXRpb246IC40cztcblxuIH1cbiAgIFxuIC5mb290bm90ZTpob3ZlciAucmVmZXJlbmNlLXByZXZpZXcge1xuXHRvcGFjaXR5OiAxO1xuIH1cbiBcbiAgIGA7XG4gIGNvbnN0IHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBzdHlsZS50ZXh0Q29udGVudCA9IHN0eWxlcztcbiAgZG9jdW1lbnQuaGVhZC5hcHBlbmQoc3R5bGUpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgc3R5bGVzO1xuIl0sIm5hbWVzIjpbIm9wdGlvbnMiLCJjb250YWluZXIiLCJmbkFuY2hvciIsInJlZkFuY2hvciIsImJhY2tncm91bmQiLCJ0ZXh0IiwidXNlck9wdGlvbnMiLCJjb25maWciLCJzdHlsZXMiLCJzdHlsZSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsInRleHRDb250ZW50IiwiaGVhZCIsImFwcGVuZCIsImZuUkUiLCJSZWdFeHAiLCJyZWZSRSIsImNvbnNvbGUiLCJsb2ciLCJhcnRpY2xlIiwicXVlcnlTZWxlY3RvciIsIkVycm9yIiwibmkiLCJjcmVhdGVOb2RlSXRlcmF0b3IiLCJOb2RlRmlsdGVyIiwiU0hPV19URVhUIiwicmVmZXJlbmNlTm9kZSIsImN1cnJlbnQiLCJub2RlcyIsIm5leHROb2RlIiwicGFyZW50RWwiLCJwYXJlbnRFbGVtZW50Iiwic3RyIiwidGVzdCIsInRyYW5zZm9ybWVkVGV4dCIsImlubmVyVGV4dCIsInJlcGxhY2UiLCJpbm5lckhUTUwiLCJyZXBsYWNlQWxsIiwibWF0Y2giLCJmb3JFYWNoIiwibnVtIiwiZXhlYyIsInNwYW4iLCJzZXRBdHRyaWJ1dGUiLCJnZXRFbGVtZW50QnlJZCIsInB1c2giXSwibWFwcGluZ3MiOiI7Ozs7OztzQ0FRQSxNQUFNQSxFQUFtQixDQUN2QkMsVUFBVyxVQUNYQyxTQUFVLEtBQ1ZDLFVBQVcsS0FDWEMsV0FBWSxPQUNaQyxLQUFNLGVDVmdCLFNBQUtDLEdBTzNCLE1BQU1DLEVBQVMsSUFBS1AsS0FBWU0sSUFFMUJMLFVBQUVBLEVBQVNDLFNBQUVBLEVBQVFDLFVBQUVBLEVBQVNFLEtBQUVBLEVBQUlELFdBQUVBLEdBQWVHLEVDWmhELEVBQUNGLEVBQWNELEtBQzVCLE1BQU1JLEVBQVMsME1BUUlKLGdCQUNYQyx3UUFlRkksRUFBUUMsU0FBU0MsY0FBYyxTQUNyQ0YsRUFBTUcsWUFBY0osRUFDcEJFLFNBQVNHLEtBQUtDLE9BQU9MLEVBQU0sRURkM0JELENBQU9ILEVBQU1ELEdBRWIsTUFBTVcsRUFBTyxJQUFJQyxPQUFPLEdBQUdkLFNBQWlCLEtBQ3RDZSxFQUFRLElBQUlELE9BQU8sR0FBR2IsU0FBa0IsS0FDOUNlLFFBQVFDLElBQUlKLEdBQ1osTUFBTUssRUFBVVYsU0FBU1csY0FBY3BCLEdBRXZDLElBQUttQixFQUFTLE1BQU1FLE1BQU0sK0JBRTFCLE1BQU1DLEVBQUtiLFNBQVNjLG1CQUFtQkosRUFBU0ssV0FBV0MsV0FFM0QsSUFBS0gsRUFBR0ksY0FBZSxNQUFNTCxNQUFNLDRCQUVuQyxJQUFJTSxFQUVBQyxFQUFRLEdBRVosS0FBUUQsRUFBVUwsRUFBR08sWUFBYSxDQUNoQyxNQUFNQyxFQUFXUixFQUFHSSxjQUFjSyxjQUU1QkMsRUFBTVYsRUFBR0ksY0FBY2YsWUFDN0IsSUFBS21CLEVBQVUsT0FJZixHQUFtQixpQkFBUkUsSUFBcUJBLEVBQUssTUFBTVgsTUFBTSxvQkFFakQsR0FBSVAsRUFBS21CLEtBQUtELEdBQU0sQ0FDbEIsTUFBTUUsRUFBa0JKLEdBQVVLLFVBQVVDLFFBQzFDdEIsRUFDQSxnRUFFRmdCLEVBQVNPLFVBQVlILENBQ3RCLENBRUQsR0FBSWxCLEVBQU1pQixLQUFLRCxHQUFNLENBRW5CLE1BQU1FLEVBQWtCSixFQUFTTyxVQUFVQyxXQUN6QyxnQkFDQSxvQ0FFRnJCLFFBQVFDLElBQUlnQixHQUNaSixFQUFTTyxVQUFZSCxFQUNMRixFQUFJTyxNQUFNdkIsR0FFbEJ3QixTQUFTRCxJQUNmLE1BQU9FLEdBQU8sS0FBS0MsS0FBS0gsR0FFbEJJLEVBQU9sQyxTQUFTQyxjQUFjLFFBQ3BDaUMsRUFBS0MsYUFBYSxRQUFTLHFCQUMzQkQsRUFBS04sVUFBWVAsRUFBU08sVUFBVUQsUUFBUUssRUFBTSxJQUFLLElBRXZEaEMsU0FBU29DLGVBQWVKLElBQU01QixPQUFPOEIsRUFBSyxHQUU3QyxDQUNEZixFQUFNa0IsS0FBS25CLEVBQ1osQ0FDRFYsUUFBUUMsSUFBSVUsRUFDZCJ9
