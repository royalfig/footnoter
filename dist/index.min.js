/**
   * @license
   * author: Ryan Feigenbaum
   * footnoter.js v1.0.0
   * Released under the MIT license.
   */
var footnoter=function(){"use strict";const t={container:"article",fnAnchor:">>",refAnchor:"<<",background:"#fff",text:"#000"};return function(n){const e={...t,...n};console.log(e);const{container:r,fnAnchor:o,refAnchor:c,text:i,background:a}=e,d=new RegExp(`${o}(\\d+)`,"g"),f=new RegExp(`${c}(\\d+)`,"g"),s=document.querySelector(r);if(!s)throw Error("No container found.");const l=s?.querySelector("p")?.getBoundingClientRect();if(!l)throw Error("Can't find container size");const{width:p,left:g,right:u}=l;if(((t,n,e,r,o)=>{const c=`\n    body {\n    }\n\t.footnote {\n\t\tfont-size: 12px;\n\t\ttext-decoration: none;\n        border-radius: 50%;\n        padding: 0 4px;\n        font-variant-numeric: tabular-nums;\n        left: -4px;\n        font-weight: 700;\n        vertical-align: text-top;\n        color: inherit;\n        scroll-padding: 30px;\n\t}\n\n    :target {\n        margin-top: 1em;\n    }\n\n    \n\n    .footnote:hover {\n        background: rgba(0 0 0 / .15)\n    }\n\n\t.reference-preview {\n\t\tposition: absolute;\n\t\topacity: 0;\n\t\ttransform: translateY(-1rem);\n\t\tleft: 0;\n        font-weight: 400;\n\t\t\n\t\tpointer-events: none;\n\t\tpadding: 3rem .5rem;\n\t\twidth: ${e}px;\n\t\ttransition: .4s;\n\t\tbackground: linear-gradient(to top, transparent, ${n},  ${n}, transparent);\n\t\t\n\n\t}\n\n\t.reference-content {\n\t\tfont-size: 15px;\n\t\tbackground-color: ${n};\n\t\tcolor: ${t};\n\t\tborder-radius: 9px;\n\t\tpadding: 1em;\n\t\tbox-shadow: 0 19px 38px rgba(0,0,0,0.30), 0 15px 12px rgba(0,0,0,0.22);\n\n\n\t}\n\t\n\t.footnote:hover .reference-preview {\n\t\topacity: 1;\n\t}\n \n   `,i=document.createElement("style");i.textContent=c,document.head.append(i)})(i,a,p),!s)throw Error("Content container not found");const h=document.createNodeIterator(s,NodeFilter.SHOW_TEXT);if(!h.referenceNode)throw Error("Reference node not found");let m;for(console.log(h);m=h.nextNode();){const t=h.referenceNode.parentElement,n=h.referenceNode.textContent;if(!t)throw Error(`No parent el, ${m}`);if("string"!=typeof n||!n)throw Error("Nothing to match");if(d.test(n)){const n=t?.innerText.replace(d,"<a class='footnote' id='$1' href='#ref-$1'>$1</a>");t.innerHTML=n,t.setAttribute("style","position:relative;")}if(f.test(n)){const e=n.match(f);if(!e||!e.length)throw Error("Couldn't find matches");e.forEach((n=>{const e=/\d/.exec(n);if(!e)throw Error("Couldn`t extract number");const[r]=e,o=document.createElement("div");o.setAttribute("class","reference-preview");const c=document.createElement("div");c.setAttribute("class","reference-content"),c.innerHTML=t.innerHTML.replace(/&lt;&lt;(\d)/g,"$1 | "),o.append(c),document.getElementById(r)?.append(o)}));const r=t.innerHTML.replaceAll(/&lt;&lt;(\d)/g,"$1. "),o=r[0];t.id=`ref-${o}`,t.innerHTML=`${r} <a href="#${o}">â®Œ</a>`}console.log(m)}}}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
