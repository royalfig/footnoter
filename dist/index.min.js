/**
   * @license
   * author: Ryan Feigenbaum
   * footnoter.js v1.0.0
   * Released under the MIT license.
   */
var footnoter=function(){"use strict";const t={container:"article",fnAnchor:">>",refAnchor:"<<",background:"#fff",text:"#000"};function e(t,e,n){if(t.test(e)){!function(t,e,n){const r=e.match(t);if(!r||!r.length)throw Error("Couldn't find matches");r.forEach((t=>{const e=/\d+/.exec(t);if(!e)throw Error("Couldn`t extract number");const[r]=e,o=document.createElement("div");o.setAttribute("class","reference-preview");const c=document.createElement("div");c.setAttribute("class","reference-content"),c.innerHTML=n.innerHTML.replace(/&lt;&lt;(\d+)/g,"$1 | "),o.append(c),document.getElementById(r)?.append(o)}))}(t,e,n);const r=n.innerHTML.replaceAll(/&lt;&lt;(\d+)/g,"$1. "),o=/\d+/.exec(e);if(!o)throw Error("Couldn`t extract number for reference");const[c]=o;return n.id=`ref-${c}`,n.innerHTML=`${r} <a class="reference-back" href="#${c}" aria-label="Back to footnote ${c}">â®Œ</a>`,[c.toString()]}return[]}return function(n){try{const r={...t,...n};console.log(r);const{container:o,fnAnchor:c,refAnchor:i,text:a,background:l}=r,s=new RegExp(`${c}(\\d+)`,"g"),f=new RegExp(`${i}(\\d+)`,"g"),d=new RegExp(`(${c}|${i})\\d+`);console.log(d);const h=document.querySelector(o);if(!h)throw Error("No container found.");const g=h?.querySelector("p")?.getBoundingClientRect();if(!g)throw Error("Can't find container size");const{width:p,left:u,right:x}=g;((t,e,n,r,o)=>{const c=`\n    body {\n    }\n\t.footnote {\n\t\tfont-size: 12px;\n\t\ttext-decoration: none;\n        border-radius: 50%;\n        padding: 0 4px;\n        font-variant-numeric: tabular-nums;\n        left: -4px;\n        font-weight: 700;\n        vertical-align: text-top;\n        color: inherit;\n        scroll-padding: 30px;\n\t}\n\n    :target {\n        margin-top: 1em;\n    }\n\n    \n\n    .footnote:hover {\n        background: rgba(0 0 0 / .15)\n    }\n\n\t.reference-preview {\n\t\tposition: absolute;\n\t\topacity: 0;\n\t\ttransform: translateY(-1rem);\n\t\tleft: 0;\n        font-weight: 400;\n\t\t\n\t\tpointer-events: none;\n\t\tpadding: 3rem .5rem;\n\t\twidth: ${n}px;\n\t\ttransition: .4s;\n\t\tbackground: linear-gradient(to top, transparent, ${e},  ${e}, transparent);\n\t\t\n\n\t}\n\n\t.reference-content {\n\t\tfont-size: 15px;\n\t\tbackground-color: ${e};\n\t\tcolor: ${t};\n\t\tborder-radius: 9px;\n\t\tpadding: 1em;\n\t\tbox-shadow: 0 19px 38px rgba(0,0,0,0.30), 0 15px 12px rgba(0,0,0,0.22);\n\n\n\t}\n\t\n\t.footnote:hover .reference-preview {\n\t\topacity: 1;\n\t}\n\n  .reference-back {\n    text-decoration: none;\n  }\n \n   `,i=document.createElement("style");i.textContent=c,document.head.append(i)})(a,l,p);const m=document.createNodeIterator(h,NodeFilter.SHOW_ELEMENT,(t=>t&&t.textContent&&d.test(t.textContent)?NodeFilter.FILTER_ACCEPT:NodeFilter.FILTER_REJECT));if(!m.referenceNode)throw Error("Reference node not found");let E,b=[];for(;E=m.nextNode();)b.push(E);const $=b.slice(1);let w=[],C=[];if($.forEach((t=>{const n=t.textContent,r=t;if("string"!=typeof n||!n)throw Error("Nothing to match");if(!r)throw Error(`No parent element, ${t}`);let o=function(t,e,n){if(t.test(e)){const r=e.match(t)?.map((t=>t.replace(">>",""))),o=n?.innerText.replace(t,"<a class='footnote' id='$1' href='#ref-$1'>$1</a>");return n.innerHTML=o,n.setAttribute("style","position:relative;"),r||[]}return[]}(s,n,r);w=[...w,...o];let c=e(f,n,r);C=[...C,...c]})),w.length!==C.length){const[t,e]=w.length>C.length?[w,C]:[C,w],n=t.filter((t=>!e.includes(t))).join(", "),r=(t,e,n)=>`It looks like there are more ${t.length>e.length?"footnotes ("+t.length+") than references ("+e.length+")":"references ("+e.length+") than footnotes ("+t.length+")"}. Check ${t.length>e.length?"footnote(s)":"reference(s)"} ${n}`;throw Error(r(w,C,n))}}catch(t){console.error(t)}}}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
