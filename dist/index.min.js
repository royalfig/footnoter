/**
   * @license
   * author: Ryan Feigenbaum
   * footnoter.js v1.0.0
   * Released under the MIT license.
   */
var footnoter=function(){"use strict";return function(){const e=document.querySelector("article");if(!e)throw Error("Content container not found");const t=document.createNodeIterator(e,NodeFilter.SHOW_TEXT);if(!t.referenceNode)return;let n=t.nextNode(),o=[];for(;n;){const e=t.referenceNode.textContent;if("string"!=typeof e||!e)throw Error("Nothing to match");if(/>>/.test(e)){const n=e.match(/>>(\d)/);if(n){const[r,d]=n,c=e.replace(/>>\d/,""),a=document.createElement("a"),p=document.createElement("sup");a.setAttribute("href",`#${d}`),p.textContent=d,a.setAttribute("style","padding: 5px"),a.classList.add("footnote"),a.id=`ref-${d}`,a.append(p),t.referenceNode.parentElement&&t.referenceNode.parentElement.append(a),t.referenceNode.textContent=c,o.push(t.referenceNode)}}if(/<</.test(t.referenceNode.textContent)){const e=t.referenceNode.textContent.match(/<<(\d)/,"FOOTNOTE $1")[1],n=t.referenceNode.textContent.replace(/<<\d/,""),o=t.referenceNode.parentElement.textContent.replace(/<<\d/,"");document.getElementById(`ref-${e}`).setAttribute("data-reference",o);const r=document.createElement("a"),d=document.createElement("sup");r.setAttribute("href",`#ref-${e}`),d.textContent=e,r.setAttribute("style","padding: 5px"),r.id=e,r.append(d),t.referenceNode.parentElement.prepend(r),t.referenceNode.textContent=n}n=t.nextNode()}const r=document.createElement("style");r.textContent=".footnote {position:relative} a.footnote:hover {opacity: 1} .footnote:hover::after {width:200px;\n\tcontent: attr(data-reference); position:absolute; top: -1rem; right: 25px; box-shadow: 2px 2px 20px rgb(0 0 0 / .25); padding: 5px 15px; background: white; border-radius; 5px; transform: translateY(-50%); \n}",document.head.append(r),console.log(o)}}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXgubWluLmpzIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiLCIuLi9zcmMvc3R5bGVzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBvcHRpb25zIGZyb20gXCIuL29wdGlvbnNcIjtcbmltcG9ydCBzdHlsZXMgZnJvbSBcIi4vc3R5bGVzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgY29uc3QgYXJ0aWNsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2FydGljbGUnKVxuXG4gICAgaWYgKCFhcnRpY2xlKSB0aHJvdyBFcnJvcignQ29udGVudCBjb250YWluZXIgbm90IGZvdW5kJyk7XG5cbiAgICBjb25zdCBuaSA9IGRvY3VtZW50LmNyZWF0ZU5vZGVJdGVyYXRvcihhcnRpY2xlLCBOb2RlRmlsdGVyLlNIT1dfVEVYVClcblxuICAgIGlmICghbmkucmVmZXJlbmNlTm9kZSkgcmV0dXJuO1xuXG4gICAgbGV0IGN1cnJlbnQgPSBuaS5uZXh0Tm9kZSgpXG5cbiAgICBsZXQgbm9kZXMgPSBbXVxuXG4gICAgd2hpbGUgKGN1cnJlbnQpIHtcbiAgICAgICAgY29uc3Qgc3RyID0gbmkucmVmZXJlbmNlTm9kZS50ZXh0Q29udGVudDtcblxuICAgICAgICBpZiAodHlwZW9mIHN0ciAhPT0gXCJzdHJpbmdcIiB8fCAhc3RyKSB0aHJvdyBFcnJvcignTm90aGluZyB0byBtYXRjaCcpO1xuXG4gICAgICAgIGlmICgvPj4vLnRlc3Qoc3RyKSkge1xuXG4gICAgICAgICAgICBjb25zdCBtYXRjaFJlc3VsdHMgPSBzdHIubWF0Y2goLz4+KFxcZCkvKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKG1hdGNoUmVzdWx0cykge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGNvbnN0IFt3aG9sZSwgZ3JvdXBdID0gbWF0Y2hSZXN1bHRzO1xuICAgICAgICAgICAgICAgIGNvbnN0IGV4dHJhY3QgPSBzdHIucmVwbGFjZSgvPj5cXGQvLCBcIlwiKVxuICAgICAgICAgICAgICAgIGNvbnN0IGZuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpXG4gICAgICAgICAgICAgICAgY29uc3Qgc3VwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3VwJylcbiAgICAgICAgICAgICAgICBmbi5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBgIyR7Z3JvdXB9YClcbiAgICAgICAgICAgICAgICBzdXAudGV4dENvbnRlbnQgPSBncm91cDtcbiAgICAgICAgICAgICAgICBmbi5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgJ3BhZGRpbmc6IDVweCcpXG4gICAgICAgICAgICAgICAgZm4uY2xhc3NMaXN0LmFkZCgnZm9vdG5vdGUnKVxuICAgICAgICAgICAgICAgIGZuLmlkID0gYHJlZi0ke2dyb3VwfWA7XG4gICAgICAgICAgICAgICAgZm4uYXBwZW5kKHN1cClcbiAgICAgICAgICAgICAgICBuaS5yZWZlcmVuY2VOb2RlLnBhcmVudEVsZW1lbnQgJiYgbmkucmVmZXJlbmNlTm9kZS5wYXJlbnRFbGVtZW50LmFwcGVuZChmbilcblxuICAgICAgICAgICAgICAgIG5pLnJlZmVyZW5jZU5vZGUudGV4dENvbnRlbnQgPSBleHRyYWN0O1xuXG5cbiAgICAgICAgICAgICAgICBub2Rlcy5wdXNoKG5pLnJlZmVyZW5jZU5vZGUpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoLzw8Ly50ZXN0KG5pLnJlZmVyZW5jZU5vZGUudGV4dENvbnRlbnQpKSB7XG5cbiAgICAgICAgICAgIGNvbnN0IHQgPSBuaS5yZWZlcmVuY2VOb2RlLnRleHRDb250ZW50Lm1hdGNoKC88PChcXGQpLywgXCJGT09UTk9URSAkMVwiKVsxXVxuICAgICAgICAgICAgY29uc3QgZXh0cmFjdCA9IG5pLnJlZmVyZW5jZU5vZGUudGV4dENvbnRlbnQucmVwbGFjZSgvPDxcXGQvLCBcIlwiKVxuXG5cbiAgICAgICAgICAgIGNvbnN0IHJlZmVyZW5jZSA9IG5pLnJlZmVyZW5jZU5vZGUucGFyZW50RWxlbWVudC50ZXh0Q29udGVudC5yZXBsYWNlKC88PFxcZC8sIFwiXCIpO1xuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoYHJlZi0ke3R9YCkuc2V0QXR0cmlidXRlKCdkYXRhLXJlZmVyZW5jZScsIHJlZmVyZW5jZSlcbiAgICAgICAgICAgIGNvbnN0IGZuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpXG4gICAgICAgICAgICBjb25zdCBzdXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdXAnKVxuICAgICAgICAgICAgZm4uc2V0QXR0cmlidXRlKCdocmVmJywgYCNyZWYtJHt0fWApXG4gICAgICAgICAgICBzdXAudGV4dENvbnRlbnQgPSB0O1xuICAgICAgICAgICAgZm4uc2V0QXR0cmlidXRlKCdzdHlsZScsICdwYWRkaW5nOiA1cHgnKVxuICAgICAgICAgICAgZm4uaWQgPSB0O1xuICAgICAgICAgICAgZm4uYXBwZW5kKHN1cClcbiAgICAgICAgICAgIG5pLnJlZmVyZW5jZU5vZGUucGFyZW50RWxlbWVudC5wcmVwZW5kKGZuKVxuXG4gICAgICAgICAgICBuaS5yZWZlcmVuY2VOb2RlLnRleHRDb250ZW50ID0gZXh0cmFjdDtcblxuXG4gICAgICAgIH1cblxuICAgICAgICBjdXJyZW50ID0gbmkubmV4dE5vZGUoKVxuICAgIH1cblxuXG4gICAgY29uc3Qgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpXG4gICAgc3R5bGUudGV4dENvbnRlbnQgPSBzdHlsZXM7XG4gICAgZG9jdW1lbnQuaGVhZC5hcHBlbmQoc3R5bGUpXG4gICAgY29uc29sZS5sb2cobm9kZXMpXG59IiwiY29uc3Qgc3R5bGVzOiBzdHJpbmcgPSBgLmZvb3Rub3RlIHtwb3NpdGlvbjpyZWxhdGl2ZX0gYS5mb290bm90ZTpob3ZlciB7b3BhY2l0eTogMX0gLmZvb3Rub3RlOmhvdmVyOjphZnRlciB7d2lkdGg6MjAwcHg7XG5cdGNvbnRlbnQ6IGF0dHIoZGF0YS1yZWZlcmVuY2UpOyBwb3NpdGlvbjphYnNvbHV0ZTsgdG9wOiAtMXJlbTsgcmlnaHQ6IDI1cHg7IGJveC1zaGFkb3c6IDJweCAycHggMjBweCByZ2IoMCAwIDAgLyAuMjUpOyBwYWRkaW5nOiA1cHggMTVweDsgYmFja2dyb3VuZDogd2hpdGU7IGJvcmRlci1yYWRpdXM7IDVweDsgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01MCUpOyBcbn1gXG5cbmV4cG9ydCBkZWZhdWx0IHN0eWxlczsiXSwibmFtZXMiOlsiYXJ0aWNsZSIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIkVycm9yIiwibmkiLCJjcmVhdGVOb2RlSXRlcmF0b3IiLCJOb2RlRmlsdGVyIiwiU0hPV19URVhUIiwicmVmZXJlbmNlTm9kZSIsImN1cnJlbnQiLCJuZXh0Tm9kZSIsIm5vZGVzIiwic3RyIiwidGV4dENvbnRlbnQiLCJ0ZXN0IiwibWF0Y2hSZXN1bHRzIiwibWF0Y2giLCJ3aG9sZSIsImdyb3VwIiwiZXh0cmFjdCIsInJlcGxhY2UiLCJmbiIsImNyZWF0ZUVsZW1lbnQiLCJzdXAiLCJzZXRBdHRyaWJ1dGUiLCJjbGFzc0xpc3QiLCJhZGQiLCJpZCIsImFwcGVuZCIsInBhcmVudEVsZW1lbnQiLCJwdXNoIiwidCIsInJlZmVyZW5jZSIsImdldEVsZW1lbnRCeUlkIiwicHJlcGVuZCIsInN0eWxlIiwiaGVhZCIsImNvbnNvbGUiLCJsb2ciXSwibWFwcGluZ3MiOiI7Ozs7Ozs2Q0FHYyxXQUNWLE1BQU1BLEVBQVVDLFNBQVNDLGNBQWMsV0FFdkMsSUFBS0YsRUFBUyxNQUFNRyxNQUFNLCtCQUUxQixNQUFNQyxFQUFLSCxTQUFTSSxtQkFBbUJMLEVBQVNNLFdBQVdDLFdBRTNELElBQUtILEVBQUdJLGNBQWUsT0FFdkIsSUFBSUMsRUFBVUwsRUFBR00sV0FFYkMsRUFBUSxHQUVaLEtBQU9GLEdBQVMsQ0FDWixNQUFNRyxFQUFNUixFQUFHSSxjQUFjSyxZQUU3QixHQUFtQixpQkFBUkQsSUFBcUJBLEVBQUssTUFBTVQsTUFBTSxvQkFFakQsR0FBSSxLQUFLVyxLQUFLRixHQUFNLENBRWhCLE1BQU1HLEVBQWVILEVBQUlJLE1BQU0sVUFFL0IsR0FBSUQsRUFBYyxDQUVkLE1BQU9FLEVBQU9DLEdBQVNILEVBQ2pCSSxFQUFVUCxFQUFJUSxRQUFRLE9BQVEsSUFDOUJDLEVBQUtwQixTQUFTcUIsY0FBYyxLQUM1QkMsRUFBTXRCLFNBQVNxQixjQUFjLE9BQ25DRCxFQUFHRyxhQUFhLE9BQVEsSUFBSU4sS0FDNUJLLEVBQUlWLFlBQWNLLEVBQ2xCRyxFQUFHRyxhQUFhLFFBQVMsZ0JBQ3pCSCxFQUFHSSxVQUFVQyxJQUFJLFlBQ2pCTCxFQUFHTSxHQUFLLE9BQU9ULElBQ2ZHLEVBQUdPLE9BQU9MLEdBQ1ZuQixFQUFHSSxjQUFjcUIsZUFBaUJ6QixFQUFHSSxjQUFjcUIsY0FBY0QsT0FBT1AsR0FFeEVqQixFQUFHSSxjQUFjSyxZQUFjTSxFQUcvQlIsRUFBTW1CLEtBQUsxQixFQUFHSSxjQUNqQixDQUNKLENBRUQsR0FBSSxLQUFLTSxLQUFLVixFQUFHSSxjQUFjSyxhQUFjLENBRXpDLE1BQU1rQixFQUFJM0IsRUFBR0ksY0FBY0ssWUFBWUcsTUFBTSxTQUFVLGVBQWUsR0FDaEVHLEVBQVVmLEVBQUdJLGNBQWNLLFlBQVlPLFFBQVEsT0FBUSxJQUd2RFksRUFBWTVCLEVBQUdJLGNBQWNxQixjQUFjaEIsWUFBWU8sUUFBUSxPQUFRLElBQzdFbkIsU0FBU2dDLGVBQWUsT0FBT0YsS0FBS1AsYUFBYSxpQkFBa0JRLEdBQ25FLE1BQU1YLEVBQUtwQixTQUFTcUIsY0FBYyxLQUM1QkMsRUFBTXRCLFNBQVNxQixjQUFjLE9BQ25DRCxFQUFHRyxhQUFhLE9BQVEsUUFBUU8sS0FDaENSLEVBQUlWLFlBQWNrQixFQUNsQlYsRUFBR0csYUFBYSxRQUFTLGdCQUN6QkgsRUFBR00sR0FBS0ksRUFDUlYsRUFBR08sT0FBT0wsR0FDVm5CLEVBQUdJLGNBQWNxQixjQUFjSyxRQUFRYixHQUV2Q2pCLEVBQUdJLGNBQWNLLFlBQWNNLENBR2xDLENBRURWLEVBQVVMLEVBQUdNLFVBQ2hCLENBR0QsTUFBTXlCLEVBQVFsQyxTQUFTcUIsY0FBYyxTQUNyQ2EsRUFBTXRCLFlDekVhLHVURDBFbkJaLFNBQVNtQyxLQUFLUixPQUFPTyxHQUNyQkUsUUFBUUMsSUFBSTNCLEVBQ2hCIn0=
